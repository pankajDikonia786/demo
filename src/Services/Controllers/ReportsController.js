const fs = require('fs');
const Sq = require("sequelize");
const PDFDocument = require('pdfkit-table')
const { BssStudentHost, BssHost, BssStudents, BssParents, BssParentAddress, BssSchoolDetails, BssStudentAllergy, BssDormitories, BssClasses, BssAttendanceUsers, BssStudentAttendance, BssReasons, BssUsers } = require("../Models/common");
const { DateTime } = require('luxon');
const BssStuCurrentLocation = require("../../Services/Models/common/BssStuCurrentLocation");
// const { response } = require('express');
const fastCsv = require("fast-csv");
const { group } = require('console');
const { all } = require('..');


module.exports.BssHostReport = async (req, res) => {
  const config_sequelize = req.config_sequelize;
  const login_user = req.login_user;
  const { timeZone } = login_user.user_school
  const school_code = req.headers.school_code;
  const { is_host_approved } = req.query

  let where_data = {}
  if (is_host_approved) {
    where_data = {
      ...where_data,
      is_host_approved: is_host_approved
    }
  }
  const BssStudentModel = await BssStudents(config_sequelize);
  const BssHostModel = await BssHost(config_sequelize);
  const BssParent = await BssParents(config_sequelize);
  const BssStudentHostModel = await BssStudentHost(config_sequelize);

  try {
    const response = await BssHostModel.findAll({
      attributes: ["host_id", "host_uuid", "host_name", "remark_parents", "remark_boarding", "remark_host",
        ["host_id", "host_uuid", "host_name", "remark_host", [Sq.fn("PGP_SYM_DECRYPT", Sq.col("host_contact"), PG_ENCRYPT_KEY), "host_contact"]],
      ],
      include: {
        model: BssStudentHostModel, as: "stu_host",
        where: {
          ...where_data
        },
        attributes: ["student_host_uuid", "is_host_approved", "host_status",]
      }
    })
    const today = DateTime.now().setZone(timeZone).toFormat('dd-MM-yyyy hh:mm a');
    const file_name = `ExportHostDetails${new Date().getTime()}`;
    const uploadFilePath = `uploads/${school_code}/${file_name}.pdf`;
    const createPdfFile = fs.createWriteStream(uploadFilePath);;
    let doc = new PDFDocument({ margin: 25, size: 'A4' });
    doc.pipe(createPdfFile);

    let datas = [];

    response.forEach((value, i) => {
      datas.push({
        sno: i + 1,
        host_name: value.host_name,
        host_contact: value.host_contact,
        host_status: value.stu_host.host_status,
      });
    })
    const table = {
      title: 'List of Hosts',
      prepareHeader: () => doc.font("Helvetica-Bold").fontSize(11),
      subtitle: `Generated by Boarding School Suit (${today})`,
      headers: [
        { label: 'S.NO', property: 'sno', width: 60, renderer: null },
        { label: 'Host name', property: 'host_name', width: 90, renderer: null },
        { label: 'Host Contact', property: 'host_contact', width: 90, renderer: null },
        { label: 'Host status', property: 'host_status', width: 90, renderer: null },
      ],
      datas: [...datas],
      rows: [],
    };
    doc.table(table, {
      prepareHeader: () => doc.font("Helvetica-Bold").fontSize(07),
      prepareRow: () => doc.font("Helvetica").fontSize(07),
    });
    //move_down
    if (doc.y > 0.8 * doc.page.height) {
      doc.addPage()
    }

    doc.end();

    res.json({
      status: 200,
      success: true,
      file: process.env.APP_URL + '/' + uploadFilePath,
      message: 'Hosts Pdf Exported Successfully!',
    });
  } catch (error) {
    res.json({
      status: 400,
      error: error.message,
      success: false,
      message: "Something went wrong. Please try again or reach out to support if the issue persists",
      error: error.message,
    });
  }
}

module.exports.BssStudentHostReport = async (req, res) => {
  const config_sequelize = req.config_sequelize;
  const login_user = req.login_user;
  const school_code = req.headers.school_code;
  const { timeZone } = login_user.user_school
  const { class_id, dormiotry_id, student_name } = req.query

  let where_data = {}

  if (dormiotry_id) {
    where_data = {
      ...where_data,
      dormiotry_id: dormiotry_id
    }
  }
  if (class_id) {
    where_data = {
      ...where_data,
      class_id: class_id
    }
  }

  if (student_name) {
    where_data = {
      ...where_data,
      [Sq.Op.or]: [
        Sq.where(Sq.col("student_first_name"), { [Sq.Op.iLike]: `%${student_name}%` }),

        Sq.where(Sq.col("student_last_name"), { [Sq.Op.iLike]: `%${student_name}%` }),
      ]
    }
  }

  const BssStudentsModel = await BssStudents(config_sequelize);
  const BssHostModel = await BssHost(config_sequelize);
  const BssStudentHostModel = await BssStudentHost(config_sequelize);

  const studentRes = await BssStudentsModel.findAll({
    where: {
      ...where_data
    },
    attributes: ["student_first_name", "student_last_name", "class_id", "dormitory_id"],
    include: [
      {
        model: await BssParents(config_sequelize), as: "parent_data",
        attributes: [
          "father_name", "mother_name", "parent_id", [Sq.fn("PGP_SYM_DECRYPT", Sq.col("father_phone"), PG_ENCRYPT_KEY), "father_phone"], [Sq.fn("PGP_SYM_DECRYPT", Sq.col("mother_phone"), PG_ENCRYPT_KEY), "mother_phone"]
        ],
        include: [
          {
            model: BssStudentHostModel, as: "parents_as_host", attributes: ["student_host_uuid", "student_host_id",
              "parent_type", "host_relation", "host_status", "is_host_approved", "student_host_comment"]
          }]
      },
      {
        model: BssHostModel, as: "stu_host_data",
        attributes: ["host_id", "host_uuid", "host_name", "remark_host", [Sq.fn("PGP_SYM_DECRYPT", Sq.col("host_contact"), PG_ENCRYPT_KEY), "host_contact"]],
        through: { attributes: [] },
        include: {
          model: BssStudentHostModel, as: "stu_host",
          attributes: ["student_host_uuid", "is_host_approved", "host_relation", "host_status",]
        }
      },
    ],
  })

  const hostDetails = [];

  try {
    studentRes.forEach((value, index1) => {
      value.parent_data.parents_as_host?.forEach((parent_value, index2) => {
        if (index2 == 0) {

          hostDetails.push({
            serial_no: index1 + 1,
            student_name: value.student_first_name + ' ' + value.student_last_name,
            host_name: parent_value.parent_type === 'father' ? value.parent_data.father_name : value.parent_data.mother_name,
            host_contact: parent_value.parent_type === 'father' ? value.parent_data.father_phone : value.parent_data.mother_phone,
            host_relation: parent_value.host_relation,
            host_status: parent_value.host_status,
          });
        } else {
          hostDetails.push({
            host_name: parent_value.parent_type === 'father' ? value.parent_data.father_name : value.parent_data.mother_name,
            host_contact: parent_value.parent_type === 'father' ? value.parent_data.father_phone : value.parent_data.mother_phone,
            host_relation: parent_value.host_relation,
            host_status: parent_value.host_status,
          });

        }
      });

      value.stu_host_data.forEach((stu_host_data, index3) => {
        if (index3 == 0 && value.parent_data.parents_as_host.length == 0) {
          hostDetails.push({
            serial_no: index1 + 1,
            student_name: value.student_first_name + ' ' + value.student_last_name,
            host_name: stu_host_data.host_name,
            host_relation: stu_host_data.stu_host.host_relation,
            host_contact: stu_host_data.host_contact,
            host_status: stu_host_data.stu_host.host_status,

          });
        } else {
          hostDetails.push({
            host_name: stu_host_data.host_name,
            host_relation: stu_host_data.stu_host.host_relation,
            host_contact: stu_host_data.host_contact,
            host_status: stu_host_data.stu_host.host_status,

          });
        }
      });
    });

    const today = DateTime.now().setZone(timeZone).toFormat('dd-MM-yyyy hh:mm a');
    const file_name = `ExportStudentConnectedToHostsReport${new Date().getTime()}`;
    const uploadFilePath = `uploads/${school_code}/${file_name}.pdf`;
    const createPdfFile = fs.createWriteStream(uploadFilePath);;
    let doc = new PDFDocument({ margin: 25, size: 'A4' });
    doc.pipe(createPdfFile);

    const table = {
      title: 'Student Connected to Hosts Report',
      subtitle: `Generated by Boarding School Suit (${today})`,
      headers: [
        { label: 'S.NO', property: 'serial_no', width: 50, renderer: null },
        { label: 'Student Name', property: 'student_name', width: 80, renderer: null },
        { label: 'Host Name', property: "host_name", width: 80, renderer: null },
        { label: 'Host Contact', property: "host_contact", width: 80, renderer: null },
        { label: 'Host_Relation', property: 'host_relation', width: 80, renderer: null },
        { label: 'Host Status', property: 'host_status', width: 60, renderer: null },
      ],
      datas: [...hostDetails],
      options: {
        divider: {
          header: { disabled: true }, // Disable header dividers
          horizontal: { disabled: false, width: 0.1, opacity: 0.2 },
        },
      },
      rows: [],
    };

    doc.table(table, {
      prepareHeader: () => doc.font("Helvetica-Bold").fontSize(07), algin: 'centre',
      prepareRow: () => doc.font('Helvetica').fontSize(07)
    });



    if (doc.y > 0.8 * doc.page.height) {
      doc.addPage()
    }
    doc.end();
    // })
    res.json({
      status: 200,
      success: true,
      file: process.env.APP_URL + '/' + uploadFilePath,
      message: 'students connected to hosts Pdf Exported Successfully!',
    });
  } catch (error) {
    res.json({
      status: 400,
      error: error.message,
      success: false,
      message: "Something went wrong. Please try again or reach out to support if the issue persists",
      error: error.message,
    });
  }
}

// allergic report

// module.exports.GenerateAllergicReport =async(req,res)=>{
//   try {
//     const config_sequelize = req.config_sequelize;
//     const login_user = req.login_user;
//     const school_code = req.headers.school_code;
//     const{timeZone} = login_user.user_school
//     const{dormitory_id,class_id,student_id,search,gender}=req.query
//     let where_data ={}

//     if(dormitory_id){
//       where_data ={
//           ...where_data,
//           dormitory_id:dormitory_id
//       }
//     }

//     if(class_id){
//       where_data ={
//           ...where_data,
//           class_id:class_id
//       }
//     }
//     if(student_id){
//       where_data ={
//         ...where_data,
//         student_id:student_id
//       }
//     }
//     if(gender){
//       where_data ={
//         ...where_data,
//         gender:gender
//       }
//     }
//     if(search){
//       where_data ={
//         ...where_data,
//         [Sq.Op.or]:[
//           Sq.where(Sq.col("student_first_name"),{[Sq.Op.like]: `%${search}%`}),
//           Sq.where(Sq.col("student_last_name"),{[Sq.Op.like]: `%${search}%`})
//         ]
//       }
//     }

//     const BssStudentModel = await BssStudents(config_sequelize);
//     const BssStudentAllergyModel = await BssStudentAllergy(config_sequelize);
//     const BssDormitoriesModel = await BssDormitories(config_sequelize);
//     const BssClassModel = await BssClasses(config_sequelize);

//     BssStudentModel.hasOne(await BssClassModel,{
//       as: "class_details",
//       foreignKey: "class_id",
//       sourceKey: "class_id",
//     });

//     const response = await BssStudentModel.findAll({
//       where:{
//           ...where_data,
//         student_allergy_status: Sq.where(
//           Sq.fn("PGP_SYM_DECRYPT", Sq.col("student_allergy_status"), PG_ENCRYPT_KEY),
//           "LIKE",
//           "yes"
//         ),
//       },
//       attributes: [
//         [Sq.fn("concat", Sq.col("student_first_name"), " ", Sq.col("student_last_name")), "student_name"],
//         [Sq.fn("PGP_SYM_DECRYPT",Sq.col("unique_pin"),PG_ENCRYPT_KEY),"unique_pin"],"gender",
//         "student_first_name",
//         "student_last_name",
//       ],
//       include: [
//         {
//           model: BssClassModel,
//           as: "class_details",
//           attributes: ["class_name"],
//         },
//         {
//           model: BssDormitoriesModel,
//           as: "dormitory_data",
//           attributes: [
//             [Sq.fn("PGP_SYM_DECRYPT", Sq.col("dormitory_name"), PG_ENCRYPT_KEY), "dormitory_name"],
//           ],
//         },
//         {
//           model: BssStudentAllergyModel,
//           as: "allergy_details",
//           attributes: [
//             [Sq.fn("PGP_SYM_DECRYPT", Sq.col("allergy_name"), PG_ENCRYPT_KEY), "allergy_name"],
//             [Sq.fn("PGP_SYM_DECRYPT", Sq.col("allergy_info"), PG_ENCRYPT_KEY), "allergy_info"],
//             [Sq.fn("PGP_SYM_DECRYPT", Sq.col("allergy_note"), PG_ENCRYPT_KEY), "allergy_note"],
//           ],
//         },
//       ],
//     });


//     const todayDate = DateTime.now().setZone(timeZone).toFormat("dd-MM-yyyy hh:mm a");
//     const file_name = `ExportAllergyDetailsPdf-${new Date().getTime()}.pdf`;
//     const uploadFilePath = `uploads/${school_code}/${file_name}`;
//     const createPdfFile = fs.createWriteStream(uploadFilePath);
//     const doc = new PDFDocument({ margin: 24, size: "A4" });
//     doc.pipe(createPdfFile);

//     let table_title = {
//       headers: [
//           { label: "ALLRGIC REPORT", fontSize:20, align: "center",width:"510", headerColor: "white"}

//       ],
//   }

//   doc.table(table_title,
//     {
//         prepareHeader: () => doc.font("Helvetica-Bold").fontSize(11),
//         padding:1,
//     })

//     let datas =[]
//     response.forEach(async(student,index1)=>{
//       student.allergy_details.forEach((allergy,index)=>{
//           if(allergy.allergy_note.length>50){
//           allergy.allergy_note =allergy.allergy_note.substring(0,100)+ '........'
//         }
//         if(index==0){
//       datas.push({
//         serial_no:index1+1,
//         student_name: `${student.student_first_name} ${student.student_last_name}`,
//         class_name:student.class_details.class_name,
//         gender:student.gender,
//         allergy_name: allergy.allergy_name,
//         allergy_info: allergy.allergy_info,
//         allergy_note: allergy.allergy_note,
//       })
//     }else{
//       datas.push({
//         allergy_name: allergy.allergy_name,
//         allergy_info: allergy.allergy_info,
//         allergy_note: allergy.allergy_note,
//       }) 
//     }
//     })
//   })

//      const table = {
//       subtitle:`Generated by Boarding School Suit (${todayDate})`,

//      headers: [
//       { label: 'S.NO', property: 'serial_no', width: 40, renderer: null },
//         { label: "Student Name", property: "student_name", width: 100 },
//         { label: "Class", property: "class_name", width: 60},
//         { label: "Gender", property: "gender", width: 60 },
//         { label: "Allergy Name", property: "allergy_name", width: 100},
//         { label: "Allergy Info", property: "allergy_info", width: 110 },
//         { label: "Allergy Note", property: "allergy_note", width: 160},
//       ],
//       datas: [...datas],
//       options: {
//         divider: {
//           header: { disabled: true }, // Disable header dividers
//           horizontal: { disabled: false, width: 0.1, opacity: 0.2},
//         },
//       },
//       rows: []
//     };

//     doc.table(table, {
//       prepareHeader: () => doc.font("Helvetica-Bold").fontSize(12),
//       prepareRow: () => doc.font("Helvetica").fontSize(9),
//       // padding:3,

//     });

//     if (doc.y > 0.8 * doc.page.height) {
//       doc.addPage()
//   }

//   doc.moveDown(); // move to down // separate tables
//     doc.end();

//     res.json({
//       status: 200,
//       success: true,
//       file: process.env.APP_URL + "/" + uploadFilePath,
//       message: "Allergy Details Successfully Exported ",
//     });
//   } 
//   catch (error) {
//     res.json({
//       status: 400,
//       success: false,
//       error:error.message,
//       message: "something went wrong please try again or reach out to support if the issue persists",
//     });
//   }
// };

module.exports.HostConnectedToStudentsReport = async (req, res) => {
  const config_sequelize = req.config_sequelize;
  const login_user = req.login_user;
  const school_code = req.headers.school_code;
  const { timeZone } = login_user.user_school
  const { class_id, dormiotry_id, search } = req.query

  let where_data = {}

  if (class_id) {
    where_data = {
      ...where_data,
      class_id: class_id
    }
  }
  if (dormiotry_id) {
    where_data = {
      ...where_data,
      dormiotry_id: dormiotry_id
    }
  }
  if (search) {
    where_data = {
      ...where_data,
      [Sq.Op.or]: [Sq.where(Sq.col("student_first_name"), { [Sq.Op.iLike]: `%${search}` }),
      Sq.where(Sq.col("student_last_name"), { [Sq.Op.iLike]: `%${search}` })]
    }

  }

  const BssStudentModel = await BssStudents(config_sequelize);
  const BssHostModel = await BssHost(config_sequelize);
  const BssParent = await BssParents(config_sequelize);
  const BssStudentHostModel = await BssStudentHost(config_sequelize);

  BssHostModel.belongsToMany(await BssStudentModel, {
    through: await BssStudentHostModel,
    as: "studentRes", foreignKey: "host_id", otherKey: "student_id"
  })
  try {
    const response = await BssHostModel.findAndCountAll({
      include: [{
        model: BssStudentModel, as: "studentRes",
        where: { ...where_data },
        attributes: [[Sq.fn("concat", Sq.col("student_first_name"), ' ', Sq.col("student_last_name")), "student_name"]],
        through: { attributes: ["host_relation", "host_status"] },
      }]
    })


    let datas = []
    response.rows.forEach((val, index1) => {
      val.studentRes.forEach((stu, index2) => {
        if (index2 == 0) {
          datas.push({
            serial_no: index1 + 1,
            host_name: val.host_name,
            host_contact: val.host_contact,
            host_status: stu.bss_student_host.host_status,
            host_relation: stu.bss_student_host.host_relation,
            student_name: stu.dataValues.student_name
          })
        } else {
          datas.push({
            host_relation: stu.bss_student_host.host_relation,
            student_name: stu.dataValues.student_name,
          })
        }
      })
    })
    const today = DateTime.now().setZone(timeZone).toFormat('dd-MM-yyyy hh:mm a')
    const file_name = `ExportHostConnectedToStudentsReport${new Date().getTime()}`;
    const uploadFilePath = `uploads/${school_code}/${file_name}.pdf`;
    const createPdfFile = fs.createWriteStream(uploadFilePath);
    let doc = new PDFDocument({ margin: 25, size: 'A4' });
    doc.pipe(createPdfFile)

    const table = {
      title: 'Hosts Connected to Students Report', fontSize: 10,
      subtitle: `Generated by Boarding School Suit (${today})`,
      headers: [
        { label: 'S.NO', property: 'serial_no', width: 60, renderer: null },
        { label: 'Host Name', property: "host_name", width: 100, renderer: null },
        { label: 'Host Contact', property: "host_contact", width: 100, renderer: null },
        { label: 'Host Status', property: 'host_status', width: 90, renderer: null },
        { label: 'Host_Relation', property: 'host_relation', width: 100, renderer: null },
        { label: 'Student Name', property: 'student_name', width: 100, renderer: null },
      ],
      datas: [...datas],
      options: {
        divider: {
          header: { disabled: true }, // Disable header dividers
          horizontal: { disabled: false, width: 0.1, opacity: 0.1 },
        },
      },
      rows: [],
    };

    doc.table(table, {
      prepareHeader: () => doc.font("Helvetica-Bold").fontSize(12), algin: 'centre',
      prepareRow: () => doc.font('Helvetica').fontSize(09)
    });

    if (doc.y > 0.8 * doc.page.height) {
      doc.addPage()
    }
    doc.end();
    res.json({
      status: 200,
      success: true,
      file: process.env.APP_URL + '/' + uploadFilePath,
      message: 'Host Connected To Students Report Exported Successfully!',
    });
  } catch (error) {
    res.json({
      status: 400,
      error: error.message,
      success: false,
      message: "Something went wrong. Please try again or reach out to support if the issue persists",
      error: error.message,
    });
  }
}

// module.exports.markAttendence = async(req,res)=>{
//     const config_sequelize =req.config_sequelize
//     const login_user =req.login_user
//     const attendaceDetails=req.body 
//     const BssStuCurrrentLocationModel =await BssStuCurrentLocation(config_sequelize)
//     const BssAttendanceUsersModel =await BssAttendanceUsers(config_sequelize)
//     const BssStudentAttendanceModel =await BssStudentAttendance(config_sequelize)

//      let student_ids=[]
//      try{
//       await config_sequelize.transaction(async(transactionInstance) => {
//       let attendanceUser = await BssAttendanceUsersModel.create({

//            user_id: login_user.user_id, 
//            duration_time: attendaceDetails.duration_time,
//            attendance_title:attendaceDetails.attendance_title,
//            created_by:login_user.user_id
//       },
//           {transaction: transactionInstance});

//             await (attendaceDetails.Roll_call.map(async(value)=>{
//               value.attendance_user_id =attendanceUser.attendance_user_id
//               value.duration_time =attendanceUser.duration_time
//               value.created_by =login_user.user_id              
//               student_ids.push(value.student_id)

//               //if StudentPresent then reason_id will be null or undefined
//               //if Student Present then change current location with upsert method 
//               //value.reason_id==null means student_present
//               const Current_location = await BssStuCurrrentLocationModel.upsert({
//               student_id:value.student_id,
//               reason_id:value.reason_id,
//               current_present_status:value.reason_id ==null||undefined?true:false,
//               is_loc_changed:value.is_loc_changed
//           },     
//          {transaction:transactionInstance,raw:true}
//         ); 
//            //mark attendence Present or not 

//          value.is_attendance = value.reason_id == null||undefined?true:false

//          value.reason_id = Current_location[0].reason_id

//        // }
//         }))
//         await BssStudentAttendanceModel.update({is_latest: false}, {

//                 where: {
//                       is_latest: true, student_id: {[Sq.Op.in]: student_ids}
//                     },

//                     transaction:transactionInstance
//               }); 
//            //mark attendance

//               await BssStudentAttendanceModel.bulkCreate(attendaceDetails.Roll_call,
//               {transaction: transactionInstance});


//               res.json({
//                 status:200,
//                 success:true,
//                 message:'Attendance created successfully'
//               })
//              })
//           }
//           catch(error){
//             console.log(error)
//             res.json({
//               status:400,
//               message:'Oops! Something went wrong.',
//               error:error.message
//             })
//           }  
// }


//  module.exports.WeeklyAttendanceReasonsChart = async(req,res)=>{
//   const config_sequelize = req.config_sequelize;
//   const login_user =req.login_user
//   const {timezone} =login_user.user_school
//   let { start_date, end_date } = req.query;
//    let where_data={}

//    if (start_date && end_date) {
//    where_data ={
//     ...where_data,
//     created_date:{
//     [Sq.Op.and]:{
//     [Sq.Op.gte]:DateTime.fromFormat(start_date, "yyyy-MM-dd").setZone(timezone).startOf('day').toUTC().toISO(),
//     [Sq.Op.lte]:DateTime.fromFormat(end_date, "yyyy-MM-dd").setZone(timezone).endOf('day').toUTC().toISO()
//     }
//   }
//  }
// }
//       const BssStudentAttendanceModel = await BssStudentAttendance(config_sequelize);
//       const BssReasonsModel =await BssReasons(config_sequelize)
//       try{
//      const weeklyData = await BssStudentAttendanceModel.findAll({
//           where:{...where_data,is_attendance:false},
//           attributes: [
//             [Sq.fn('COUNT',Sq.col("bss_student_attendance.reason_id")),'COUNT']    
//           ],include:{
//             model:BssReasonsModel , as:"atten_reason_data",
//             attributes: ["reason_name"]
//           },
//         group:["atten_reason_data.reason_uuid","atten_reason_data.reason_id"],
//       })
//       res.json({
//       status: 200,
//       success: true,
//       weeklyData:weeklyData,
//       message: 'Get Weekly Attendance Reason Chart successfully!',
//       });
//     }catch (error) {
//     res.status(500).json({
//       status: 500,
//       success: false,
//       error: error,
//       message: 'Something went wrong. Please try again or reach out to support if the issue persists.',
//     });
//   }  
// }
//   module.exports.WeekwiseAttendanceReasonsChart = async (req, res) => {
//   const config_sequelize = req.config_sequelize;
//   const login_user = req.login_user;
//   const { timezone } = login_user.user_school;

//   const BssStudentAttendanceModel = await BssStudentAttendance(config_sequelize);
//   const BssReasonsModel = await BssReasons(config_sequelize);

//   try {
//     const today = DateTime.now().setZone(timezone);
//     const weeklyData = [];
//     // Fetch weekly data for the last 12 weeks
//     for (let i = 0; i <12; i++) {
//       const startOfWeek = today.minus({ weeks: i }).startOf('day');
//       const endOfWeek = today.minus({ weeks: i }).endOf('day');

//       const weeklyResult = await BssStudentAttendanceModel.findAll({
//         where: {
//           created_date: {
//             [Sq.Op.gte]: startOfWeek.toISO(),
//             [Sq.Op.lte]: endOfWeek.toISO(),
//           },

//           is_attendance: false,
//         },
//         attributes: [
//           [Sq.fn('COUNT', Sq.col("bss_student_attendance.reason_id")), 'COUNT']
//         ],
//         include: {
//           model: BssReasonsModel, as: "atten_reason_data",
//           attributes: ["reason_name"]
//         },
//         group:["atten_reason_data.reason_uuid","atten_reason_data.reason_id"],
//       });

//       weeklyData.push({
//         interval: `Week ${i + 1}`,
//         data: weeklyResult,
//       });
//     }
//     res.json({
//       status: 200,
//       success: true,
//       weeklyData: weeklyData,
//       message: 'Get Weekly Attendance Reason Chart successfully!',
//     });
//   } catch (error) {
//     res.json({
//       status: 400,
//       success:false,
//       error: error.message,
//       message: 'Something went wrong. Please try again or reach out to support if the issue persists.',
//     });
//   }
// }

module.exports.ResetAllReasonsdata = async (req, res) => {
  const config_sequelize = req.config_sequelize
  const login_user = req.login_user

  const BssStudentAttendanceModel = await BssStudentAttendance(config_sequelize);
  BssStudentAttendanceModel.destroy({
    truncate: true,

  }).then((response) => {
    res.json({
      status: 400,
      success: true,
      message: "All Reasons data Rest SuccessFully"
    })
  }).catch((error) => {
    res.json({
      status: 400,
      success: false,
      error: error.message,
      message: "Something went wrong. Please try again or reach out to support if the issue persists"

    })
  })
}


//   module.exports.WeekwiseAttendanceReasonsChart = async (req, res) => {
//     const config_sequelize = req.config_sequelize;
//     const login_user =req.login_user
//     const {timezone,school_code} =login_user.user_school
//     let { start_date, end_date } = req.query;

//     var where_data ={}
//     if (start_date && end_date) {
//         start_date = DateTime.fromFormat(start_date, "yyyy-MM-dd").setZone(timezone).startOf('day').toUTC().toISO();
//         end_date = DateTime.fromFormat(end_date, "yyyy-MM-dd").setZone(timezone).endOf('day').toUTC().toISO();
//        where_data = {
//             ...where_data,
//             created_date: {
//                 [Sq.Op.and]: {
//                     [Sq.Op.gte]: start_date,
//                     [Sq.Op.lte]: end_date
//                 }

//             }
//         }
//     }
//   else{
//     where_data = {
//             created_date: {
//               [Sq.Op.and]:{
//                 [Sq.Op.gte]:DateTime.now().setZone(timezone).startOf('week').toISO(),
//                 [Sq.Op.lte]:DateTime.now().setZone(timezone).endOf('week').toISO(),
//                 }
//             },
//     }
//   }
//     const BssStudentAttendanceModel = await BssStudentAttendance(config_sequelize);
//     const BssReasonsModel =await BssReasons(config_sequelize)

//           await BssStudentAttendanceModel.findAll({
//           where: {...where_data ,is_attendance: false,
//           },
//           attributes: [
//             [Sq.fn('COUNT', Sq.col("bss_student_attendance.reason_id")), 'COUNT']
//           ],
//           include: [{
//             model: BssReasonsModel, as: "atten_reason_data",
//             attributes: ["reason_name"]
//           }],
//           group:["atten_reason_data.reason_uuid","atten_reason_data.reason_id"],

//     }).then(async (response) => {


//       let datas =[]
//         response.forEach((val,index)=>{
//     const resons =  val.atten_reason_data.dataValues.reason_name

//         datas.push({
//           serial_no:index+1,
//           reason_name:val.atten_reason_data.dataValues.reason_name,
//           count:val.dataValues.COUNT
//         })
//       })

//         const today = DateTime.now().setZone(timezone).toFormat('dd-MM-yyyy hh:mm a')
//         const file_name = `WeekWiseAttendanceReasonsReport${new Date().getTime()}`;
//         const uploadFilePath = `uploads/${school_code}/${file_name}.pdf`;
//         const createPdfFile = fs.createWriteStream(uploadFilePath);;
//         let doc =new PDFDocument({margin:25 ,size:'A4'});
//         doc.pipe(createPdfFile)

//         let table_title = {
//         headers: [
//           { label: `Generated by Boarding School Suit (${today})`, width: 200, headerColor: "white" },
//           { label: 'Weekly Attendace Reason Report', fontSize: 20, align: "center", width: 275, headerColor: "white" }
//       ],
//     }
//     doc.table(table_title,
//       {
//           prepareHeader: () => doc.font("Helvetica-Bold").fontSize(11),
//           padding: 4,

//       });

//         // title: 'Weekly Attendace Reason Report ',fontSize:10 ,
//         // subtitle: `Generated by Boarding School Suit (${today})``Date Range ${start_date} ${end_date}`,
//         const table = { 
//           subtitle:start_date && end_date ?`Date Range ${start_date.split("T")} To ${end_date.split("T")})` : "Current Week Data",
//         headers: [
//           { label: 'S.NO', property: 'serial_no', width: 60, renderer: null },
//           { label: 'Reason Name', property: "reason_name", width: 100, renderer: null },
//           { label: 'Count', property: "count", width: 100, renderer: null },
//         ],
//          datas: [...datas],
//           options: {
//           divider: {
//             header: { disabled: true }, // Disable header dividers
//             horizontal: { disabled: false, width: 0.1, opacity: 0.1 },
//           },
//         },
//         rows: [],
//       };

//       doc.table(table, {
//         prepareHeader: () => doc.font("Helvetica-Bold").fontSize(12), algin: 'centre',
//         prepareRow: () => doc.font('Helvetica').fontSize(09)
//       });

//       // if (doc.y > 0.8 * doc.page.height) {
//       // doc.addPage()
//       // }
//       doc.end();
//       res.json({
//         status: 200,
//         success: true,
//         file: process.env.APP_URL + '/' + uploadFilePath,
//         message: 'Host Connected To Students Report Exported Successfully!',
//       })

//     }).catch((error) => {
//         console.log(error);
//         res.json({
//             status: 400,
//             success: false,
//             error: error,
//             message: "Something went wrong. Please try again or reach out to support if the issue persists."

//         })

//     })
// }



module.exports.WeekwiseAttendanceReasonsChart = async (req, res) => {
  const config_sequelize = req.config_sequelize;
  const login_user = req.login_user
  const { timezone, school_code, school_name } = login_user.user_school
  const { first_name, last_name } = login_user
  let { start_date, end_date } = req.query;



  var where_data = {}
  if (start_date && end_date) {
    start_date = DateTime.fromFormat(start_date, "yyyy-MM-dd").setZone(timezone).startOf('day').toUTC().toISO();
    end_date = DateTime.fromFormat(end_date, "yyyy-MM-dd").setZone(timezone).endOf('day').toUTC().toISO();
    where_data = {
      ...where_data,
      created_date: {
        [Sq.Op.and]: {
          [Sq.Op.gte]: start_date,
          [Sq.Op.lte]: end_date
        }
      }
    }
  }

  const BssStudentAttendanceModel = await BssStudentAttendance(config_sequelize);
  const BssReasonsModel = await BssReasons(config_sequelize)

  await BssStudentAttendanceModel.findAll({
    where: {
      ...where_data, is_attendance: false,
    },
    attributes: [
      [Sq.fn('COUNT', Sq.col("bss_student_attendance.reason_id")), 'COUNT']
    ],
    include: [{
      model: BssReasonsModel, as: "atten_reason_data",
      attributes: ["reason_name"]
    }],
    group: ["atten_reason_data.reason_uuid", "atten_reason_data.reason_id"],

  }).then(async (response) => {
    let datas = []
    response.forEach((val, index) => {
      const resons = val.atten_reason_data.dataValues.reason_name

      datas.push({
        serial_no: index + 1,
        reason_name: val.atten_reason_data.dataValues.reason_name,
        count: val.dataValues.COUNT
      })
    })

    const today = DateTime.now().setZone(timezone).toFormat('dd-MM-yyyy hh:mm a')
    const file_name = `WeekWiseAttendanceReasonsReport${new Date().getTime()}`;
    const uploadFilePath = `uploads/${school_code}/${file_name}.pdf`;
    const createPdfFile = fs.createWriteStream(uploadFilePath);;
    let doc = new PDFDocument({ margin: 25, size: 'A4' });
    doc.pipe(createPdfFile)

    let table_title = {
      headers: [
        { label: today, headerAlign: "left", headerColor: "white", width: 100 },
        { label: 'Weekly Attendace Reason Report', fontSize: 15, align: "center", width: 150, headerColor: "white" },
        { label: `school:${school_name}`, fontSize: 10, width: 150, headerColor: "white", headerAlign: "right" },
      ],
    }
    doc.table(table_title)
    //   {
    //       prepareHeader: () => doc.font("Helvetica-Bold").fontSize(11),
    //       // padding: 4,

    //   });

    let table_subtitle = {
      headers: [
        { label: start_date && end_date ? `Date Range ${start_date.slice(0, 10)} To ${end_date.slice(0, 10)}` : "Current Week Data", headerColor: "white", valign: "center", headerAlign: "left", width: 200, },
        { label: `Manger:${first_name} ${last_name}`, width: 200, headerColor: "white", valign: "center", headerAlign: "right", },
        // {label:  `Date Reang ${start_date} To ${end_date}`,fontSize: 9, width: 200,},

      ],
    }
    doc.table(table_subtitle,
      {
        prepareHeader: () => doc.fontSize(7),
        // padding: 4,

      });

    const table = {
      subtitle: table_subtitle,
      // subtitle: {label:start_date && end_date ?`Date Range ${start_date.slice(0,10)} To ${end_date.slice(0,10)}` : "Current Week Data",fontSize: 9, width: 200,},
      headers: [
        { label: 'S.NO', property: 'serial_no', width: 100, renderer: null },
        { label: 'Reason Name', property: "reason_name", width: 150, renderer: null },
        { label: 'Count', property: "count", width: 150, renderer: null },
      ],
      datas: [...datas],
      options: {
        // subtitle: {label:start_date && end_date ?`Date Range ${start_date.slice(0,10)} To ${end_date.slice(0,10)}` : "Current Week Data",fontSize: 9, width: 200,},
        divider: {
          header: { disabled: true }, // Disable header dividers
          horizontal: { disabled: false, width: 0.1, opacity: 0.1 },
        },
        // padding: 5,
      },
      rows: [],
    };

    doc.table(table, {
      prepareHeader: () => doc.font("Helvetica-Bold").fontSize(12), algin: 'centre',
      prepareRow: () => doc.font('Helvetica').fontSize(09)
    });

    if (doc.y > 0.8 * doc.page.height) {
      doc.addPage()
    }
    doc.end();
    res.json({
      status: 200,
      success: true,
      file: process.env.APP_URL + '/' + uploadFilePath,
      message: 'Weekly  Students Attendance Reasons Report Exported Successfully!',
    })

  }).catch((error) => {
    console.log(error);
    res.json({
      status: 400,
      success: false,
      error: error,
      message: "Something went wrong. Please try again or reach out to support if the issue persists."

    })

  })
}



module.exports.CreatePdf = async (req, res) => {

  let datas = [
    {
      Building_Number: 600,
      Street_Name: "Travesía Rivas",
      Street_Address: "Ronda Jimena, 2, 13º B",
      State: "Pontevedra",
      City: "Los Noriega",
      Post_Code: 20641
    },
    {
      Building_Number: 131,
      Street_Name: "Avenida Lovato",
      Street_Address: "Camino Piña, 1, 8º F",
      State: "Illes Balears",
      City: "Villa Saucedo",
      Post_Code: 84658
    },
    {
      Building_Number: 158,
      Street_Name: "Lovato",
      Street_Address: "Piña, 1, 8º F",
      State: "Balears",
      City: "Villa ",
      Post_Code: 44658
    },
    {
      Building_Number: 171,
      Street_Name: "Avenida",
      Street_Address: "Camino",
      State: "Illes",
      City: "Vla",
      Post_Code: 14458
    }
  ]

  file_name = `ExportPdfOfRendomAddress${new Date().getTime}`
  const Createpath = `upload/${file_name}`
  const CreatePdf = fs.createWriteStream(pathOfFile)
}





// module.exports.PdfAndCsvFileOfHost = async (req, res) => {
//   const config_sequelize = req.config_sequelize;
//   const login_user = req.login_user;
//   const school_code = req.headers.school_code;
//   const { first_name, last_name } = login_user
//   const { timeZone,school_name} = login_user.user_school
//   const { student_uuid } = req.query
//   let where_data = {}

//   where_data ={
//     ...where_data,
//     is_host_approved:true
//   }

//   // where_data = {
//   //   ...where_data,
//   //   student_uuid: student_uuid
//   // }

//   const BssStudentsModel = await BssStudents(config_sequelize);
//   const BssHostModel = await BssHost(config_sequelize);
//   const BssStudentHostModel = await BssStudentHost(config_sequelize);

//   const studentRes = await BssStudentsModel.findOne({
//     where:{student_uuid},
//     attributes: ["student_first_name", "student_last_name", "class_id", "dormitory_id"],
//     include: [
//       {
//         model: await BssParents(config_sequelize), as: "parent_data",
//         attributes: [
//           "father_name", "mother_name", "parent_id", [Sq.fn("PGP_SYM_DECRYPT", Sq.col("father_phone"), PG_ENCRYPT_KEY), "father_phone"],
//           [Sq.fn("PGP_SYM_DECRYPT", Sq.col("mother_phone"), PG_ENCRYPT_KEY), "mother_phone"], [Sq.fn('PGP_SYM_DECRYPT', Sq.col('mother_email'), PG_ENCRYPT_KEY), "mother_email"],
//           [Sq.fn('PGP_SYM_DECRYPT', Sq.col('father_email'), PG_ENCRYPT_KEY), "father_email"],
//         ],
//         include: [
//           {
//             model: BssStudentHostModel, as: "parents_as_host", where:{...where_data}, attributes: ["student_host_uuid", "student_host_id",
//               "parent_type", "host_relation", "host_status", "is_host_approved", "student_host_comment",]
//           }]
//       },
//       {
//         model: BssHostModel, as: "stu_host_data",
//         attributes: ["host_id", "host_uuid", "host_name", "remark_host","remark_parents","remark_boarding", [Sq.fn("PGP_SYM_DECRYPT", Sq.col("host_contact"), PG_ENCRYPT_KEY), "host_contact"],
//           [Sq.fn('PGP_SYM_DECRYPT', Sq.col('host_email'), PG_ENCRYPT_KEY), "host_email"], [Sq.fn('PGP_SYM_DECRYPT', Sq.col('host_address'), PG_ENCRYPT_KEY), "host_address"],
//         ],
//         through: { attributes: [] },
//         include: {
//           model: BssStudentHostModel, as: "stu_host",
//           where:{...where_data},
//           attributes: ["student_host_uuid", "is_host_approved", "host_relation", "host_status",]
//         }
//       },
//     ],
//   })
//   // console.log("studentRes",studentRes)
//   const hostDetails = [];
//   let student_name =studentRes.student_first_name + ' ' + studentRes.student_last_name
//   try {
//     studentRes.parent_data.parents_as_host?.forEach((parent_value, index2) => {

//       hostDetails.push({
//         // student_name: studentRes.student_first_name + ' ' + studentRes.student_last_name,
//         host_name: parent_value.parent_type === 'father' ? studentRes.parent_data.father_name : studentRes.parent_data.mother_name,
//         host_contact: parent_value.parent_type === 'father' ? studentRes.parent_data.father_phone : studentRes.parent_data.mother_phone,
//         host_email: parent_value.parent_type === 'father' ? studentRes.parent_data.father_email : studentRes.parent_data.mother_email,
//         host_relation: parent_value.host_relation,
//         is_host_approved: parent_value.is_host_approved,
//         remark_parents: parent_value.remark_parents,
//         remark_boarding: parent_value.remark_boarding,
//         remark_host: parent_value.remark_host,
//       });

//     });
//     studentRes.stu_host_data.forEach((stu_host_data, index3) => {
//       hostDetails.push({
//         // student_name: studentRes.student_first_name + ' ' + studentRes.student_last_name,
//         host_name: stu_host_data.host_name,
//         host_relation: stu_host_data.stu_host.host_relation,
//         host_contact: stu_host_data.host_contact,
//         // host_address:stu_host_data.host_address,
//         // host_status: stu_host_data.stu_host.host_status,
//         is_host_approved: stu_host_data.stu_host.is_host_approved,
//         remark_parents: stu_host_data.remark_parents,
//         remark_boarding: stu_host_data.remark_boarding,
//         remark_host: stu_host_data.remark_host,
//       });

//     });

//     console.log(":::::::::::::::::;;;host",hostDetails)
//     // const today = DateTime.now().setZone(timeZone).toFormat('dd-MM-yyyy hh:mm a');
//     // const file_name = `hostDetails${new Date().getTime()}`;
//     // const uploadFilePath = `uploads/${school_code}/${file_name}.pdf`;
//     // const createPdfFile = fs.createWriteStream(uploadFilePath);;
//     // let doc = new PDFDocument({ margin: 25, size: 'A4' });
//     // doc.pipe(createPdfFile);

//     // let table_title = {
//     //   headers: [
//     //     { label: today, headerAlign: "left", headerColor: "white", width: 200 },
//     //     { label: `${student_name} host details`, align: "center", width: 200, headerColor: "white" },
//     //     { label: `school:${school_name}`, width: 150, headerColor: "white", headerAlign: "right" },
//     //   ],
//     // }
//     // doc.table(table_title, {
//     //   prepareHeader: () => doc.font("Helvetica-Bold").fontSize(12), algin: 'centre',
//     // })
//     // let table_subtitle = {
//     //   headers: [
//     //     { label: `Generated by Boarding School Suit`, headerAlign: "left", headerColor: "white", width: 250 },
//     //     { label: `Manger:${first_name} ${last_name}`, width: 300, headerColor: "white", valign: "center", headerAlign: "right", },

//     //   ],
//     // }
//     // doc.table(table_subtitle,
//     //   {
//     //     prepareHeader: () => doc.fontSize(10),
//     //     // padding: 4,

//     //   });
//     // const table = {

//     //   subtitle: `Generated by Boarding School Suit(${today})`,
//     //   headers: [
//     //     // { label: 'S.NO', property: 'serial_no', width: 50, renderer: null },
//     //     // { label: 'Student Name', property: 'student_name', width: 80, renderer: null },
//     //     { label: 'Name', property: "host_name", width: 100, renderer: null },
//     //     { label: 'Contact', property: "host_contact", width: 100, renderer: null },
//     //     { label: 'Relation', property: 'host_relation', width: 80, renderer: null },
//     //     // { label: 'Host Status', property: 'host_status', width: 60, renderer: null },
//     //     // { label: 'Host Address', property: 'Address', width: 60, renderer: null },
//     //     { label: `Parent Remark`, property: 'remark_parents', width: 100, renderer: null },
//     //     { label: 'Bording Remark', property: 'remark_boarding', width: 100, renderer: null },
//     //     { label: 'Host Remark', property: 'remark_host', width: 100, renderer: null },

//     //   ],

//     //   datas: [...hostDetails],
//     //   options: {
//     //     divider: {
//     //       header: { disabled: true }, // Disable header dividers
//     //       horizontal: { disabled: false, width: 0.1, opacity: 0.2 },
//     //     },
//     //   },
//     //   rows: [],
//     // };

//     // doc.table(table, {
//     //   prepareHeader: () => doc.font("Helvetica-Bold").fontSize(10), algin: 'centre',
//     //   prepareRow: () => doc.font('Helvetica').fontSize(11)
//     // });



//     // if (doc.y > 0.8 * doc.page.height) {
//     //   doc.addPage()
//     // }
//     // doc.end();
//     // })
//     res.json({
//       status: 200,
//       success: true,
//       // file: process.env.APP_URL + '/' + uploadFilePath,
//       response:studentRes,

//       message: 'Report Generated successfully!',
//     });
//   } catch (error) {
//     res.json({
//       status: 400,
//       error: error.message,
//       success: false,
//       message: "Something went wrong. Please try again or reach out to support if the issue persists",
//       error: error.message,
//     });
//   }
// }


// module.exports.PdfAndCsvFileOfHost = async (req, res) => {
//   const config_sequelize = req.config_sequelize;
//   const login_user = req.login_user;
//   const school_code = req.headers.school_code;
//   const { timeZone } = login_user.user_school
//   const { student_uuid } = req.query

//   let where_data = {}

//   where_data = {
//     ...where_data,
//     student_uuid: student_uuid
//   }

//   const BssStudentsModel = await BssStudents(config_sequelize);
//   const BssHostModel = await BssHost(config_sequelize);
//   const BssStudentHostModel = await BssStudentHost(config_sequelize);
//   const BssParentAddressModel = await BssParentAddress(config_sequelize);

//   const studentRes = await BssStudentsModel.findOne({
//     where: {
//       ...where_data
//     },
//     attributes: ["student_first_name", "student_last_name", "class_id", "dormitory_id"],
//     include: [
//       {
//         model: await BssParents(config_sequelize), as: "parent_data",
//         attributes: [
//           "father_name", "mother_name", "parent_id", [Sq.fn("PGP_SYM_DECRYPT", Sq.col("father_phone"), PG_ENCRYPT_KEY), "father_phone"],
//           [Sq.fn("PGP_SYM_DECRYPT", Sq.col("mother_phone"), PG_ENCRYPT_KEY), "mother_phone"], [Sq.fn('PGP_SYM_DECRYPT', Sq.col('mother_email'), PG_ENCRYPT_KEY), "mother_email"],
//           [Sq.fn('PGP_SYM_DECRYPT', Sq.col('father_email'), PG_ENCRYPT_KEY), "father_email"],
//         ],
//         include: [{
//           model: BssParentAddressModel, as: "parent_address",
//           attributes: ["parent_address_id", "parent_address_type", "parent_country", [Sq.fn('PGP_SYM_DECRYPT', Sq.col('address_line1'), PG_ENCRYPT_KEY), "address_line1"],
//             [Sq.fn('PGP_SYM_DECRYPT', Sq.col('address_line2'), PG_ENCRYPT_KEY), "address_line2"],
//             [Sq.fn('PGP_SYM_DECRYPT', Sq.col('address_line3'), PG_ENCRYPT_KEY), "address_line3"],
//             [Sq.fn('PGP_SYM_DECRYPT', Sq.col('address_line4'), PG_ENCRYPT_KEY), "address_line4"],
//             [Sq.fn('PGP_SYM_DECRYPT', Sq.col('parent_postcode'), PG_ENCRYPT_KEY), "parent_postcode"]]
//         },
//         {
//           model: BssStudentHostModel, as: "parents_as_host", attributes: ["student_host_uuid", "student_host_id",
//             "parent_type", "host_relation", "host_status", "is_host_approved", "student_host_comment"]
//         }]
//       },
//       {
//         model: BssHostModel, as: "stu_host_data",
//         attributes: ["host_id", "host_uuid", "host_name", "remark_host", [Sq.fn("PGP_SYM_DECRYPT", Sq.col("host_contact"), PG_ENCRYPT_KEY), "host_contact"],
//           [Sq.fn('PGP_SYM_DECRYPT', Sq.col('host_email'), PG_ENCRYPT_KEY), "host_email"], [Sq.fn('PGP_SYM_DECRYPT', Sq.col('host_address'), PG_ENCRYPT_KEY), "host_address"],
//           "remark_parents", "remark_boarding",
//           "remark_host"
//         ],
//         through: { attributes: [] },
//         include: {
//           model: BssStudentHostModel, as: "stu_host",
//           attributes: ["student_host_uuid", "is_host_approved", "host_relation", "host_status", "student_host_comment"]
//         }
//       },
//     ],
//   })

//   const hostDetails = [];


//   let student_name = studentRes.student_first_name + studentRes.student_last_name;
//   try {
//     studentRes.stu_host_data.forEach((stu_host_data, index3) => {
//       hostDetails.push({
//         host_name: stu_host_data.host_name,
//         host_relation: stu_host_data.stu_host.host_relation,
//         host_contact: stu_host_data.host_contact,
//         host_address: stu_host_data.host_address,
//         host_status: stu_host_data.stu_host.host_status,
//         host_comment: stu_host_data.student_host_comment,
//         remark_parents: stu_host_data.remark_parents,
//         remark_boarding: stu_host_data.remark_boarding,
//         remark_host: stu_host_data.remark_host,
//       });

//     });
//     studentRes.parent_data.parents_as_host?.forEach((parent_value, index2) => {
//       hostDetails.push({
//         host_name: parent_value.parent_type === 'father' ? studentRes.parent_data.father_name : studentRes.parent_data.mother_name,
//         host_contact: parent_value.parent_type === 'father' ? studentRes.parent_data.father_phone : studentRes.parent_data.mother_phone,
//         host_email: parent_value.parent_type === 'father' ? studentRes.parent_data.father_email : studentRes.parent_data.mother_email,
//         host_relation: parent_value.host_relation,
//         host_status: parent_value.host_status,
//         host_comment: parent_value.student_host_comment,
//         host_address: studentRes.parent_data.parent_address[0].address_line1

//       });

//     });

//     console.log(hostDetails)

//     let stringifyData = JSON.stringify(hostDetails)
//     let PareserData = JSON.parse(stringifyData)
//     const today = DateTime.now().setZone(timeZone).toFormat('dd-MM-yyyy hh:mm a');
//     const file_name = `Export${student_name}hostDetailsCsvFile${new Date().getTime()}.csv`;
//     const uploadFilePath = `uploads/${school_code}/${file_name}`;
//     const createFile = fs.createWriteStream(uploadFilePath);;

//     fastCsv.write(PareserData, { headers: true }).on("finish", () => {
//       res.json({
//         status: 200,
//         success: true,
//         file: process.env.APP_URL + '/' + uploadFilePath,
//         message: 'Report Generated successfully!',
//       });
//     }).pipe(createFile)

//   } catch (error) {
//     res.json({
//       status: 400,
//       error: error.message,
//       success: false,
//       message: "Something went wrong. Please try again or reach out to support if the issue persists",
//       error: error.message,
//     });
//   }
// }


module.exports.GetStudentAttandenceById = async (req, res) => {
  const config_sequelize = req.config_sequelize;
  const login_user = req.login_user;
  // const { timezone } = login_user.user_school;
  let { start_date, end_date, student_uuid } = req.query;

  let students_where_data = {};
  students_where_data = {
    ...students_where_data,
    student_uuid: student_uuid
  }
  let where_data = {};

  if (start_date && end_date) {
    start_date = DateTime.fromFormat(start_date, "yyyy-MM-dd").startOf('day').toUTC().toISO();
    end_date = DateTime.fromFormat(end_date, "yyyy-MM-dd").endOf('day').toUTC().toISO();
    where_data = {
      created_date: {
        [Sq.Op.and]: {
          [Sq.Op.gte]: start_date,
          [Sq.Op.lte]: end_date
        }
      }
    }
  }
  const BssAttendanceUsersModel = await BssAttendanceUsers(await config_sequelize);
  const BssStudentsModel = await BssStudents(await config_sequelize);
  const BssStudentAttendanceModel = await BssStudentAttendance(config_sequelize);
  const BssReasonsModel = await BssReasons(config_sequelize);
  const BssUsersModel = await BssUsers(config_sequelize);

  //Make relation at here
  BssStudentAttendanceModel.hasOne(await BssStudentsModel, {
    as: "atten_student", foreignKey: "student_id", sourceKey: "student_id"
  })

  BssAttendanceUsersModel.findAndCountAll({
    where: where_data,
    attributes: ["created_date", "attendance_title"
    ],
    include: [
      {
        model: BssUsersModel,
        as: "attend_user",
        attributes: ["first_name", "last_name", "user_id"],
        required: false,
      },
      {
        model: BssStudentAttendanceModel, as: "atten_data",
        attributes: ["student_attendance_id", "is_latest", "is_attendance"],
        required: true,
        include: [
          {
            model: BssStudentsModel,
            as: "atten_student",
            where: students_where_data,
            attributes:
              [[Sq.fn('PGP_SYM_DECRYPT', Sq.col('unique_pin'), PG_ENCRYPT_KEY), "unique_pin"],
                "student_id", "student_uuid", "student_first_name", "student_last_name", "gender",
                "class_name",],

            required: true,
          },
          {
            model: BssReasonsModel, as: "attendance_reason",
            attributes: ["reason_name"],
            required: false,
          },

        ]
      },

    ],

    order: [
      ["created_date", "desc"],
      [{ model: BssStudentAttendanceModel, as: "atten_data" }, "student_id", "ASC"]
    ],

    hooks: false
  }).then((response) => {
    res.json({
      status: 200,
      success: true,
      data: response,
      message: "Get all Students for Roll Call successfully!"
    })
  }).catch((error) => {
    console.log(error);
    res.json({
      status: 400,
      success: false,
      error: error,
      message: "Something went wrong. Please try again or reach out to support if the issue persists."

    })
  })

}




// module.exports.GenerateAllergicReport = async (req, res) => {
//   try {
//     const config_sequelize = req.config_sequelize;
//     const login_user = req.login_user;
//     const school_code = req.headers.school_code;
//     const { timeZone } = login_user.user_school
//     const { dormitory_id, class_id, student_id, search, gender } = req.query
//     let where_data = {}

//     if (dormitory_id) {
//       where_data = {
//         ...where_data,
//         dormitory_id: dormitory_id
//       }
//     }

//     if (class_id) {
//       where_data = {
//         ...where_data,
//         class_id: class_id
//       }
//     }
//     if (student_id) {
//       where_data = {
//         ...where_data,
//         student_id: student_id
//       }
//     }
//     if (gender) {
//       where_data = {
//         ...where_data,
//         gender: gender
//       }
//     }
//     if (search) {
//       where_data = {
//         ...where_data,
//         [Sq.Op.or]: [
//           Sq.where(Sq.col("student_first_name"), { [Sq.Op.like]: `%${search}%` }),
//           Sq.where(Sq.col("student_last_name"), { [Sq.Op.like]: `%${search}%` })
//         ]
//       }
//     }

//     const BssStudentModel = await BssStudents(config_sequelize);
//     const BssStudentAllergyModel = await BssStudentAllergy(config_sequelize);
//     const BssDormitoriesModel = await BssDormitories(config_sequelize);
//     const BssClassModel = await BssClasses(config_sequelize);

//     BssStudentModel.hasOne(await BssClassModel, {
//       as: "class_details",
//       foreignKey: "class_id",
//       sourceKey: "class_id",
//     });


//     const Sturesponse = await BssStudentModel.findAll({
//       where: {
//         ...where_data,
//         student_allergy_status: Sq.where(
//           Sq.fn("PGP_SYM_DECRYPT", Sq.col("student_allergy_status"), PG_ENCRYPT_KEY),
//           "LIKE",
//           "yes"
//         ),
//       },
//       attributes: [
//         [Sq.fn("concat", Sq.col("student_first_name"), " ", Sq.col("student_last_name")), "student_name"],
//         [Sq.fn("PGP_SYM_DECRYPT", Sq.col("unique_pin"), PG_ENCRYPT_KEY), "unique_pin"], "gender",
//         "student_first_name",
//         "student_last_name","student_id"
//       ],
//       include: [
//         {
//           model: BssClassModel,
//           as: "class_details",
//           attributes: ["class_name"],
//         },
//         {
//           model: BssDormitoriesModel,
//           as: "dormitory_data",
//           attributes: [
//             [Sq.fn("PGP_SYM_DECRYPT", Sq.col("dormitory_name"), PG_ENCRYPT_KEY), "dormitory_name"],
//           ],
//         },
//         {
//           model: BssStudentAllergyModel,
//           as: "allergy_details",
//           attributes: [
//             [Sq.fn("PGP_SYM_DECRYPT", Sq.col("allergy_name"), PG_ENCRYPT_KEY), "allergy_name"],
//             [Sq.fn("PGP_SYM_DECRYPT", Sq.col("allergy_info"), PG_ENCRYPT_KEY), "allergy_info"],
//             [Sq.fn("PGP_SYM_DECRYPT", Sq.col("allergy_note"), PG_ENCRYPT_KEY), "allergy_note"],
//           ],
//         },
//       ],
//     });

//     let fillterStudentResponse = Sturesponse
//     let allergy_details = []
//     fillterStudentResponse.forEach(async (student, index1) => {
//       student.allergy_details.forEach((allergy, index) => {
//         allergy_details.push({
//           student_name: student.student_first_name,
//           student_id:student.student_id,
//           allergy: allergy.allergy_name,
//           class_name:student.class_details.class_name,
//         })
//       })
//     })
   
  

//     let fillterdata = allergy_details.reduce((acc, curr, index, arr) => {
//       let key = curr.allergy
//       if (!acc[key]) {
//         acc[key] = []
//         acc[key].push(curr.student_name)
//         acc[key].push(curr.class_name)


//       } else {
//         acc[key].push(curr.student_name)

        

//       }
//       return acc
//     }, {})

  
//     // console.log("::::::::::;;;",fillterdata)
//     let array = []

//     for (let key in fillterdata) {

//       let val = fillterdata[key]
//       // console.log(":::::::::::::::::;;",val)
//       function onlyUnique(value, index, array){return array.indexOf(value) === index;}
//       var unique = val.filter(onlyUnique)
//       array.push({
//         allergy_name:key,
//         stuResponse:unique,
//       })
//     }
//       const todayDate = DateTime.now().setZone(timeZone).toFormat("dd-MM-yyyy hh:mm a");
//       const file_name = `ExportAllergyDetailsPdf-${new Date().getTime()}.pdf`;
//       const uploadFilePath = `uploads/${school_code}/${file_name}`;
//       const createPdfFile = fs.createWriteStream(uploadFilePath);
//       const doc = new PDFDocument({ margin: 24, size: "A4" });
//       doc.pipe(createPdfFile);

//       let table_title = {
//         headers: [
//             { label: "ALLRGIC REPORT", fontSize:20, align: "center",width:"510", headerColor: "white"}

//         ],
//     }

//     doc.table(table_title,
//       {
//           prepareHeader: () => doc.font("Helvetica-Bold").fontSize(11),
//           padding:1,
//       })

//   let datas =[]
//       array.forEach(async(allergicRes,index1)=>{
//       allergicRes.stuResponse.forEach((stuName,index)=>{
//         if(index==0){
//           datas.push({
//             allergy_name:allergicRes.allergy_name,
//             student_name:stuName  
//           })
//         }else{
//           datas.push({
//             student_name:stuName  
//           })
//         }
//         })
 
//         // console.log("::::::::::::::::;dd",datas)

//         })


//       //  const table = {
//       //   subtitle:`Generated by Boarding School Suit (${todayDate})`,

//       //  headers: [
//       //   // { label: 'S.NO', property: 'serial_no', width: 40, renderer: null },
//       //     // { label: "Student Name", property: "student_name", width: 100 },
//       //     // { label: "Class", property: "class_name", width: 60},
//       //     // { label: "Gender", property: "gender", width: 60 },
//       //     { label: "Allergy Name", property: "allergy_name", width: 100},
//       //     { label: "student_name", property: "student_name", width: 110 },
//       //     { label: "Allergy Note", property: "allergy_note", width: 160},
//       //   ],
//       //   datas: [...datas],
//       //   options: {
//       //     divider: {
//       //       header: { disabled: true }, // Disable header dividers
//       //       horizontal: { disabled: false, width: 0.1, opacity: 0.2},
//       //     },
//       //   },
//       //   rows: []

   
      

      
    
      
//       // Define your data array containing objects
//       const data = [
//         { name: 'Alice', age: 28, location: 'New York' },
//         { name: 'Bob', age: 32, location: 'San Francisco' },
//         { name: 'Charlie', age: 25, location: 'Los Angeles' },
//       ];
      
//       // Set font size
//       doc.fontSize(12);
      
//       // Function to add a row of data to the PDF
//       function addDataRow(row) {
//         for (const key of Object.keys(row)) {
//           doc.fillColor('black').text(`${key}: ${row[key]}`, { align: 'left' });
//         }
//         doc.moveDown(); // Move down to the next row
//       }
      
//       // Iterate through data objects and add them to the PDF
//       for (const item of data) {
//         addDataRow(item);
//       }
      
//       // Finalize the PDF and close the stream
//       doc.end();
      
//       // stream.on('finish', () => {
//       //   console.log('PDF with data displayed row-wise created successfully');
//       // });
      
      
//     res.json({
//       status: 200,
//       success: true,
//       // response: response,
//       file: process.env.APP_URL + "/" + uploadFilePath,
//       message: "Allergy Details Successfully Exported ",
//     });
//   }
//   catch (error) {
//     res.json({
//       status: 400,
//       success: false,
//       error: error.message,
//       message: "something went wrong please try again or reach out to support if the issue persists",
//     });
//   }
// };


module.exports.GenerateAllergicReport = async (req, res) => {
  try {
    const config_sequelize = req.config_sequelize;
    const login_user = req.login_user;
    const school_code = req.headers.school_code;
    const { timeZone,school_name } = login_user.user_school
    const {first_name,last_name} = login_user
    let where_data = {}


    const BssStudentModel = await BssStudents(config_sequelize);
    const BssStudentAllergyModel = await BssStudentAllergy(config_sequelize);
    const BssDormitoriesModel = await BssDormitories(config_sequelize);
    const BssClassModel = await BssClasses(config_sequelize);

    BssStudentModel.hasOne(await BssClassModel, {
      as: "class_details",
      foreignKey: "class_id",
      sourceKey: "class_id",
    });


    const Sturesponse = await BssStudentModel.findAll({
      where: {
        ...where_data,
        student_allergy_status: Sq.where(
          Sq.fn("PGP_SYM_DECRYPT", Sq.col("student_allergy_status"), PG_ENCRYPT_KEY),
          "LIKE",
          "yes"
        ),
      },
      attributes: [
        [Sq.fn("concat", Sq.col("student_first_name"), " ", Sq.col("student_last_name")), "student_name"],
        [Sq.fn("PGP_SYM_DECRYPT", Sq.col("unique_pin"), PG_ENCRYPT_KEY), "unique_pin"], "gender",
        "student_first_name",
        "student_last_name","student_id"
      ],
      include: [
        {
          model: BssClassModel,
          as: "class_details",
          attributes: ["class_name"],
        },
        {
          model: BssDormitoriesModel,
          as: "dormitory_data",
          attributes: [
            [Sq.fn("PGP_SYM_DECRYPT", Sq.col("dormitory_name"), PG_ENCRYPT_KEY), "dormitory_name"],
          ],
        },
        {
          model: BssStudentAllergyModel,
          as: "allergy_details",
          attributes: [
            [Sq.fn("PGP_SYM_DECRYPT", Sq.col("allergy_name"), PG_ENCRYPT_KEY), "allergy_name"],
            [Sq.fn("PGP_SYM_DECRYPT", Sq.col("allergy_info"), PG_ENCRYPT_KEY), "allergy_info"],
            [Sq.fn("PGP_SYM_DECRYPT", Sq.col("allergy_note"), PG_ENCRYPT_KEY), "allergy_note"],
          ],
        },
      ],
    });

    let fillterStudentResponse = Sturesponse

  // Initialize an empty object to store grouped allergy data
let allergyGroups = {};

// Iterate through the Sturesponse data
fillterStudentResponse.forEach(async (student, index1) => {
  student.allergy_details.forEach((allergy, index) => {
    const allergyName = allergy.allergy_name;

    // If the allergy name is not in the allergyGroups object, create an array for it
    if (!allergyGroups[allergyName]) {
      allergyGroups[allergyName] = [];
    }

    // Add student information to the corresponding allergy group
    allergyGroups[allergyName].push({
      student_name: student.student_first_name + ' ' + student.student_last_name,
      student_id: student.student_id,
      gender: student.gender,
      class_name: student.class_details.class_name,
      allergy_note:allergy.allergy_note,
      allergy_info:allergy.allergy_info
    });
  });
});

// Create an array to hold the grouped allergy data
let groupedAllergies = [];

// Iterate through the grouped allergy data and format it
for (let allergyName in allergyGroups) {
  const studentsWithAllergy = allergyGroups[allergyName];
  groupedAllergies.push({
    allergy_name: allergyName,
    stuResponse: studentsWithAllergy,
  });
}
// Now you can use the groupedAllergies array to generate your PDF

      const todayDate = DateTime.now().setZone(timeZone).toFormat("dd-MM-yyyy hh:mm a");
      const file_name = `ExportAllergyDetailsPdf-${new Date().getTime()}.pdf`;
      const uploadFilePath = `uploads/${school_code}/${file_name}`;
      const createPdfFile = fs.createWriteStream(uploadFilePath);
      const doc = new PDFDocument({ margin: 24, size: "A4" });
      doc.pipe(createPdfFile);

      let table_title = {
        headers: [
            { label: "ALLRGIC REPORT", fontSize:20, align: "center",width:"490", headerColor: "white"},
            // { label: `school:${school_name}`, fontSize: 10, width: 110, headerColor: "white", headerAlign: "left" },


        ],
    }

    doc.table(table_title,
      {
          prepareHeader: () => doc.font("Helvetica-Bold").fontSize(11),
          padding:1,
      })

      let table_subtitle = {
        headers: [
          { label: `Generated by Boarding School Suit(${todayDate})`, headerAlign: "left", headerColor: "white", width: 250 },
          { label: `Manger:${first_name} ${last_name}`, width: 300, headerColor: "white", valign: "center", headerAlign: "right", },
  
        ],
      }
      doc.table(table_subtitle,
        {
          prepareHeader: () => doc.fontSize(09),
          // padding: 4,
  
        });


  let datas =[]
  groupedAllergies.forEach(async(allergicRes,index1)=>{
  allergicRes.stuResponse.forEach((stuName,index)=>{
    if(index==0){
      datas.push({
        serial_no:index1+1,
        allergy_name:allergicRes.allergy_name,
        student_name:stuName.student_name,
        gender:stuName.gender,
        class_name:stuName.class_name,
        allergy_note:stuName.allergy_note,
        allergy_info:stuName.allergy_info
      })
    }else{
      datas.push({
        student_name:stuName.student_name,
        gender:stuName.gender,
        class_name:stuName.class_name,
        allergy_note:stuName.allergy_note,
        allergy_info:stuName.allergy_info


      })
    }
    })
        })


       const table = {
        // subtitle:`Generated by Boarding School Suit (${todayDate})`,
        label: `school:${school_name}`, fontSize: 10, width: 150, headerColor: "white", headerAlign: "right" ,


       headers: [
        { label: 'S.NO', property: 'serial_no', width: 40, renderer: null },
          // { label: "Student Name", property: "student_name", width: 100 },
          { label: "Allergy Name", property: "allergy_name", width: 100},
          { label: "Student Name", property: "student_name", width: 110 },
          { label: "Class", property: "class_name", width: 60},
          { label: "Gender", property: "gender", width: 60 },
          { label: "Allergy Note", property: "allergy_note", width: 110},
          { label: "Allergy Info", property: "allergy_info", width: 110 },
        ],
        datas: [...datas],
        options: {
          divider: {
            header: { disabled: true }, // Disable header dividers
            horizontal: { disabled: false, width: 0.1, opacity: 0.2},
          },
        },
        rows: []
      };

      doc.table(table, {
        prepareHeader: () => doc.font("Helvetica-Bold").fontSize(12),
        prepareRow: () => doc.font("Helvetica").fontSize(9),
        // padding:3,

      });

      if (doc.y > 0.8 * doc.page.height) {
        doc.addPage()
    }

    doc.moveDown(); // move to down // separate tables
      doc.end();

    res.json({
      status: 200,
      success: true,
      // response: response,
      file: process.env.APP_URL + "/" + uploadFilePath,
      message: "Allergy Details Successfully Exported ",
    });
  }
  catch (error) {
    res.json({
      status: 400,
      success: false,
      error: error.message,
      message: "something went wrong please try again or reach out to support if the issue persists",
    });
  }
};




//      function addDataRow(row) {
//   for (const key of Object.keys(row)) {
//     doc.fillColor('black').text(`${key}: ${row[key]}`, { align: 'left' });
//   }
//   doc.moveDown(); // Move down to the next row
// }

// // Iterate through data objects and add them to the PDF
// for (const item of data) {
//   addDataRow(item);
// }


module.exports.PdfAndCsvFileOfHost = async (req, res) => {
  const config_sequelize = req.config_sequelize;
  const login_user = req.login_user;
  const school_code = req.headers.school_code;
  const { first_name, last_name } = login_user
  const { timeZone,school_name} = login_user.user_school
  const { student_uuid } = req.query
  let where_data = {}

   where_data ={
    ...where_data,
    is_host_approved:true
  }

  const BssStudentsModel = await BssStudents(config_sequelize);
  const BssHostModel = await BssHost(config_sequelize);
  const BssStudentHostModel = await BssStudentHost(config_sequelize);

  const studentRes = await BssStudentsModel.findOne({
    where:{student_uuid},
    attributes: ["student_first_name", "student_last_name", "class_id", "dormitory_id"],
    include: [
      {
        model: await BssParents(config_sequelize), as: "parent_data",
        attributes: [
          "father_name", "mother_name", "parent_id", [Sq.fn("PGP_SYM_DECRYPT", Sq.col("father_phone"), PG_ENCRYPT_KEY), "father_phone"],
          [Sq.fn("PGP_SYM_DECRYPT", Sq.col("mother_phone"), PG_ENCRYPT_KEY), "mother_phone"], [Sq.fn('PGP_SYM_DECRYPT', Sq.col('mother_email'), PG_ENCRYPT_KEY), "mother_email"],
          [Sq.fn('PGP_SYM_DECRYPT', Sq.col('father_email'), PG_ENCRYPT_KEY), "father_email"],
        ],
        include: [
          {
            model: BssStudentHostModel, as: "parents_as_host", where:{...where_data}, attributes: ["student_host_uuid", "student_host_id",
              "parent_type", "host_relation", "host_status", "is_host_approved", "student_host_comment",]
          }]
      },
      {
        model: BssHostModel, as: "stu_host_data",
        attributes: ["host_id", "host_uuid", "host_name", "remark_host","remark_parents","remark_boarding", [Sq.fn("PGP_SYM_DECRYPT", Sq.col("host_contact"), PG_ENCRYPT_KEY), "host_contact"],
          [Sq.fn('PGP_SYM_DECRYPT', Sq.col('host_email'), PG_ENCRYPT_KEY), "host_email"], [Sq.fn('PGP_SYM_DECRYPT', Sq.col('host_address'), PG_ENCRYPT_KEY), "host_address"],
        ],
        through: { attributes: [] },
        include: {
          model: BssStudentHostModel, as: "stu_host",
          where:{...where_data},
          attributes: ["student_host_uuid", "is_host_approved", "host_relation", "host_status",]
        }
      },
    ],
  })
  // console.log("studentRes",studentRes)
  const hostDetails = [];
  let student_name =studentRes.student_first_name + ' ' + studentRes.student_last_name
  try {
    studentRes.parent_data.parents_as_host?.forEach((parent_value, index2) => {
      hostDetails.push({
        // student_name: studentRes.student_first_name + ' ' + studentRes.student_last_name,
        Name : parent_value.parent_type === 'father' ? studentRes.parent_data.father_name : studentRes.parent_data.mother_name,
        Contact: parent_value.parent_type === 'father' ? studentRes.parent_data.father_phone : studentRes.parent_data.mother_phone,
        Email: parent_value.parent_type === 'father' ? studentRes.parent_data.father_email : studentRes.parent_data.mother_email,
        Relation: parent_value.host_relation,
        Is_host_approved: parent_value.is_host_approved,
        RemarkParents: parent_value.remark_parents,
        RemarkBoarding: parent_value.remark_boarding,
        RemarkHost: parent_value.remark_host,
      });
    });

      studentRes.stu_host_data.forEach((stu_host_data, index3) =>{
      hostDetails.push({
        Name: stu_host_data.host_name,
        Relation: stu_host_data.stu_host.host_relation,
        Contact: stu_host_data.host_contact,
        // host_address:stu_host_data.host_address,
        // host_status: stu_host_data.stu_host.host_status,
        Is_host_approved: stu_host_data.stu_host.is_host_approved,
        RemarkParents: stu_host_data.remark_parents,
        RemarkBoarding: stu_host_data.remark_boarding,
        RemarkHost: stu_host_data.remark_host,
      });
    });

    const today = DateTime.now().setZone(timeZone).toFormat('dd-MM-yyyy hh:mm a');
    const file_name = `hostDetails${new Date().getTime()}`;
    const uploadFilePath = `uploads/${school_code}/${file_name}.pdf`;
    const createPdfFile = fs.createWriteStream(uploadFilePath);;
    let doc = new PDFDocument({ margin: 25, size: 'A4' });
    doc.pipe(createPdfFile);

    let table_title = {
      headers: [
        { label: `Generated by Boarding School Suit`, headerAlign: "left", headerColor: "white", width: 210 },
        { label: `${student_name} host details`, align: "center", width: 200, headerColor: "white" },
        { label: `school:${school_name}`, width: 150, headerColor: "white", headerAlign: "right" },
      ],
    }
    doc.table(table_title, {
      prepareHeader: () => doc.font("Helvetica-Bold").fontSize(12), algin: 'centre',
    })
    let table_subtitle = {
      headers: [
        { label: `Date:${today}`, headerAlign: "left", headerColor: "white", width: 250 },
        { label: `Manger:${first_name} ${last_name}`, width: 300, headerColor: "white", valign: "center", headerAlign: "right", },
      ],
    }
    doc.table(table_subtitle,
      {
        prepareHeader: () => doc.fontSize(10),
        // padding: 4,
      });

    const customFontSize= 10
     function addDataRow(row) {
      doc.fontSize(customFontSize); //
  for (const key of Object.keys(row)) {
    doc.fillColor('black').text(`${key}: ${row[key]}`, { align: 'left' });
  }
  doc.moveDown(); // Move down to the next row
  doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke(); // Add a horizontal line
  doc.moveDown(); // Move down after the line
}

// Iterate through data objects and add them to the PDF
for (const item of hostDetails) {
  addDataRow(item);
}

    // const table = {

    //   subtitle: `Generated by Boarding School Suit(${today})`,
    //   headers: [
    //     // { label: 'S.NO', property: 'serial_no', width: 50, renderer: null },
    //     // { label: 'Student Name', property: 'student_name', width: 80, renderer: null },
    //     { label: 'Name', property: "host_name", width: 100, renderer: null },
    //     { label: 'Contact', property: "host_contact", width: 100, renderer: null },
    //     { label: 'Relation', property: 'host_relation', width: 80, renderer: null },
    //     // { label: 'Host Status', property: 'host_status', width: 60, renderer: null },
    //     // { label: 'Host Address', property: 'Address', width: 60, renderer: null },
    //     { label: `Parent Remark`, property: 'remark_parents', width: 100, renderer: null },
    //     { label: 'Bording Remark', property: 'remark_boarding', width: 100, renderer: null },
    //     { label: 'Host Remark', property: 'remark_host', width: 100, renderer: null },

    //   ],

    //   datas: [...hostDetails],
    //   options: {
    //     divider: {
    //       header: { disabled: true }, // Disable header dividers
    //       horizontal: { disabled: false, width: 0.1, opacity: 0.2 },
    //     },
    //   },
    //   rows: [],
    // };

    // doc.table(table, {
    //   prepareHeader: () => doc.font("Helvetica-Bold").fontSize(10), algin: 'centre',
    //   prepareRow: () => doc.font('Helvetica').fontSize(11)
    // });



    if (doc.y > 0.8 * doc.page.height) {
      doc.addPage()
    }
    doc.end();
    // })
    res.json({
      status: 200,
      success: true,
      // file: process.env.APP_URL + '/' + uploadFilePath,
      response:studentRes,

      message: 'Report Generated successfully!',
    });
  } catch (error) {
    res.json({
      status: 400,
      error: error.message,
      success: false,
      message: "Something went wrong. Please try again or reach out to support if the issue persists",
      error: error.message,
    });
  }
}
